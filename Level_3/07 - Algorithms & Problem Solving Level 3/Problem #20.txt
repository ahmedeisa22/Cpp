
#include <iostream>
#include <iomanip>
#include <cmath>
#include <string>
#include <cstdlib>
#include <vector>
#include "Header.h"
/**********************************************************************************/
// my solution
/**********************************************************************************/
using namespace std;
using namespace myLib;

//bool isPaildrome(int matrix[3], int Size) {
//	int M = round(Size/2);
//	for (int i = 0; i < M; i++) {
//		if (matrix[i] != matrix[Size - i - 1])return false;
//	}
//	return true;
//}
//bool isMatrixPaildrome(int matrix[3][3], int Rows, int Cols) {
//	
//	for (int i = 0; i < Rows; i++) {
//		for (int j = 0; j < Cols; j++)
//		{
//			if (!isPaildrome(matrix[i], Cols))return false;
//		}
//	}
//	return true;
//}
//void printMatrix(int matrix[3][3], int Rows, int Cols) {
//	for (int i = 0; i < Rows; i++) {
//		for (int j = 0; j < Cols; j++)
//			printf(" %0*d\t", 2, matrix[i][j]);
//		cout << endl;
//	}
//}
//int main(){
//	srand((unsigned)time(NULL));
//	int Matrix1[3][3] = { {1,2,1},{5,5,5},{7,3,8} };
//	
//
//	cout << "\nMatrix 1: \n";
//	printMatrix(Matrix1, 3, 3);
//
//	if (isMatrixPaildrome(Matrix1, 3, 3))
//		cout << "Yes, it is paildrome\n";
//	else
//		cout << "No, it isn't paildrome\n";
//
//	system("pause>0");
//}


/**********************************************************************************/
// His solution
/**********************************************************************************/

bool IsPalindromeMatrix(int matrix[3][3], short Rows, short Cols) {
	for (int i = 0; i < Rows; i++) {
		for (int j = 0; j < Cols/2; j++)
		{
			if (matrix[i][j] != matrix[i][Cols - j - 1]) return false;
		}
	}
	return true;
}
void PrintMatrix(int matrix[3][3], int Rows, int Cols) {
	for (int i = 0; i < Rows; i++) {
		for (int j = 0; j < Cols; j++)
			printf(" %0*d\t", 1, matrix[i][j]);
		cout << endl;
	}
}
int main() {
	int Matrix1[3][3] = { {1,2,1},{5,5,5},{7,3,7} };
	cout << "\nMatrix1:\n";  
	PrintMatrix(Matrix1, 3, 3); 
	if (IsPalindromeMatrix(Matrix1, 3, 3))
	{ 
		cout << "\nYes: Matrix is Palindrome\n";
	}
	else  
		cout << "\nNo: Matrix is NOT Palindrome\n";

	system("pause>0");
}