#pragma warning(disable: 4996)
#include <ctime>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <string>
#include <map>
#include <cstdlib>
#include <iterator>
#include <vector>


/**********************************************************************************/
// my solution
/**********************************************************************************/
using namespace std;
//struct sDate
//{
//	int Day;
//	int Month;
//	int Year;
//};
//short ReadDay() {
//	short Day;
//	cout << "Please enter a Day? ";
//	cin >> Day;
//	return Day;
//}
//short ReadMonth() {
//	short Month;
//	cout << "Please enter a Month? ";
//	cin >> Month;
//	return Month;
//}
//short ReadYear() {
//	short Year;
//	cout << "Please enter a Year? ";
//	cin >> Year;
//	return Year;
//}
//sDate ReadFullDate() {
//	sDate date;
//	date.Day = ReadDay();
//	date.Month = ReadMonth();
//	date.Year = ReadYear();
//	return date;
//}
//enum enCmpareDate{Before = -1,Equal = 0 , After = 1};
//bool IsDate1BeforeDate2(sDate Date1, sDate Date2) {
//	return  (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
//}
//bool IsDate1EqualDate2(sDate Date1, sDate Date2)
//{ 
//	return  (Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false; 
//}
//
//bool IsDate1AfterDate2(sDate Date1, sDate Date2) {
//	return (!IsDate1BeforeDate2(Date1, Date2) && !IsDate1EqualDate2(Date1, Date2));
//}
//
//enCmpareDate CompareDAtes(sDate date1 , sDate date2){
//	
//	return IsDate1BeforeDate2(date1, date2) ? enCmpareDate::Before : (IsDate1EqualDate2(date1,date2)) ? enCmpareDate::Equal : enCmpareDate::After;
//}
//bool IsOverlap(sDate Peroid1Startdate, sDate Peroid1Enddate, sDate Peroid2Startdate, sDate Peroid2Enddate) {
//	if (IsDate1BeforeDate2(Peroid2Enddate, Peroid1Startdate) || IsDate1AfterDate2(Peroid2Startdate, Peroid1Enddate))
//		return false;
//
//
//	/*if (!IsDate1BeforeDate2( Peroid2Startdate, Peroid1Startdate) && !IsDate1AfterDate2(Peroid2Startdate, Peroid1Enddate))
//		return true;*/
//	return true;
//}
//
//int main() {
//	cout << "\nenter period 1: \n";
//	cout << "enter start date: \n";
//	sDate Peroid1StartDate = ReadFullDate();
//
//	cout << "\nenter end date: \n";
//	sDate Peroid1EndDate = ReadFullDate();
//	cout << endl << endl;
//
//	cout << "\nenter period 2: \n";
//	cout << "enter start date: \n";
//	sDate Peroid2StartDate = ReadFullDate();
//
//	cout << "\nenter end date: \n";
//	sDate Peroid2EndDate = ReadFullDate();\
//	cout << endl << endl;
//
//	if (IsOverlap(Peroid1StartDate, Peroid1EndDate, Peroid2StartDate, Peroid2EndDate))
//		cout << "Yes, period overlap\n";
//	else
//		cout << "No, period not overlap\n";
//	
//	system("pause > 0");
//	return 0;
//}
/**********************************************************************************/
// his solution
/**********************************************************************************/
struct sDate
{
	int Day;
	int Month;
	int Year;
};
struct stPeriod
{
	sDate startDate;
	sDate endDate;
};
short ReadDay() {
	short Day;
	cout << "Please enter a Day? ";
	cin >> Day;
	return Day;
}
short ReadMonth() {
	short Month;
	cout << "Please enter a Month? ";
	cin >> Month;
	return Month;
}
short ReadYear() {
	short Year;
	cout << "Please enter a Year? ";
	cin >> Year;
	return Year;
}
sDate ReadFullDate() {
	sDate date;
	date.Day = ReadDay();
	date.Month = ReadMonth();
	date.Year = ReadYear();
	return date;
}
stPeriod Read2Period() {
	stPeriod p;
	cout << "enter start date: \n";
	p.startDate = ReadFullDate();
	cout << "\nenter end date: \n";
	p.endDate = ReadFullDate();

	return p;
}
enum enCmpareDate { Before = -1, Equal = 0, After = 1 };
bool IsDate1BeforeDate2(sDate Date1, sDate Date2) {
	return  (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}
bool IsDate1EqualDate2(sDate Date1, sDate Date2)
{
	return  (Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false;
}

bool IsDate1AfterDate2(sDate Date1, sDate Date2) {
	return (!IsDate1BeforeDate2(Date1, Date2) && !IsDate1EqualDate2(Date1, Date2));
}

enCmpareDate CompareDAtes(sDate date1, sDate date2) {

	return IsDate1BeforeDate2(date1, date2) ? enCmpareDate::Before : (IsDate1EqualDate2(date1, date2)) ? enCmpareDate::Equal : enCmpareDate::After;
}
bool IsOverlap(stPeriod Peroid1, stPeriod Peroid2) {
	if (CompareDAtes(Peroid2.endDate, Peroid1.startDate) == enCmpareDate::Before ||
		CompareDAtes(Peroid2.startDate, Peroid1.endDate) == enCmpareDate::After)
		return false;
	return true;
}

int main() {

	cout << "\nenter period 1: \n";
	stPeriod period1 = Read2Period();

	cout << "\nenter period 2: \n";
	stPeriod period2 = Read2Period();



	if (IsOverlap(period1, period2))
		cout << "Yes, period overlap\n";
	else
		cout << "No, period not overlap\n";

	system("pause > 0");
	return 0;
}